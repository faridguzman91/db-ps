{
    "sourceFile": "backend/utils/webtokens.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1669142478673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1669142478673,
            "name": "Commit-0",
            "content": "import {\r\n    HttpError\r\n} from 'http-errors';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport dotenv from 'dotenv';\r\n\r\nconst accessTokenSecret = process.env.ACCESS_TOKEN_SECRET\r\nmodule.exports = {\r\n    signAccessToken(payload) {\r\n        return new Promise((resolve, reject) => {\r\n            const secret = accessTokenSecret\r\n            const options = {\r\n                expiresIn: '1h',\r\n                issuer: 'localhost:5000',\r\n                audience: payload.email\r\n            }\r\n            jwt.sign(payload, secret, options, (err, token) => {\r\n                if (err) {\r\n                    console.log(err.message)\r\n                    reject(err)\r\n                }\r\n                resolve(token)\r\n            })\r\n        })\r\n    },\r\n    verifyAccessToken(req, res, next) {\r\n        if (!req.headers['authorization']) return next(createError.Unauthorized())\r\n        const authHeader = req.headers['authorization']\r\n        const bearerToken = authHeader.split(' ')\r\n        const token = bearerToken[1]\r\n        jwt.verify(token, accessTokenSecret, (err, payload) => {\r\n            if (err) {\r\n                const message = err.name === 'JsonWebToken Error' ? 'Unauthorized' : err.message\r\n                return next(createError.Unauthorized(message))\r\n            }\r\n            req.payload = payload\r\n            next()\r\n        })\r\n    }\r\n}"
        }
    ]
}