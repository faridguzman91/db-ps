{
    "sourceFile": "backend/services/auth.service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1669143640226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1669143708084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,50 @@\n \r\n require(\"dotenv\").config();\r\n \r\n const bcrypt = require(\"bcrypt\");\r\n-const jwt = require(\"../utils/webtokens\");\n\\ No newline at end of file\n+const jwt = require(\"../utils/webtokens\");\r\n+\r\n+class AuthService {\r\n+    static async registerUser(req, res) {\r\n+        const {\r\n+            email,\r\n+            password\r\n+        } = req.body;\r\n+        try {\r\n+            const user = await prisma.user.findUnique({\r\n+                where: {\r\n+                    email: email,\r\n+                },\r\n+            });\r\n+            if (user) {\r\n+                return res.status(409).json({\r\n+                    status: false,\r\n+                    message: \"User already exists\",\r\n+                });\r\n+            }\r\n+            const hashedPassword = await bcrypt.hash(password, 10);\r\n+            const newUser = await prisma.user.create({\r\n+                data: {\r\n+                    email: email,\r\n+                    password: hashedPassword,\r\n+                },\r\n+            });\r\n+            const accessToken = await jwt.signAccessToken({\r\n+                email: newUser.email,\r\n+            });\r\n+            const refreshToken = await jwt.signRefreshToken({\r\n+                email: newUser.email,\r\n+            });\r\n+            res.status(201).json({\r\n+                status: true,\r\n+                message: \"User created successfully\",\r\n+                data: {\r\n+                    accessToken,\r\n+                    refreshToken,\r\n+                },\r\n+            });\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1669143716124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,5 +51,7 @@\n         } catch (error) {\r\n             console.log(error);\r\n         }\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r\n+\r\n+module.exports = AuthService;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1669144196456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,14 @@\n const prisma = new PrismaClient();\r\n \r\n require(\"dotenv\").config();\r\n \r\n-const bcrypt = require(\"bcrypt\");\r\n-const jwt = require(\"../utils/webtokens\");\r\n+// const bcrypt = require(\"bcrypt\");\r\n+// const jwt = require(\"../utils/webtokens\");\r\n \r\n+import bcrypt from \"bcrypt\";\r\n+import jwt from \"../utils/webtokens\";\r\n+\r\n class AuthService {\r\n     static async registerUser(req, res) {\r\n         const {\r\n             email,\r\n"
                },
                {
                    "date": 1669328140696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,19 @@\n-import {\r\n-    PrismaClient\r\n-} from \"@prisma/client\";\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-require(\"dotenv\").config();\r\n-\r\n-// const bcrypt = require(\"bcrypt\");\r\n-// const jwt = require(\"../utils/webtokens\");\r\n-\r\n-import bcrypt from \"bcrypt\";\r\n-import jwt from \"../utils/webtokens\";\r\n-\r\n-class AuthService {\r\n-    static async registerUser(req, res) {\r\n-        const {\r\n-            email,\r\n-            password\r\n-        } = req.body;\r\n-        try {\r\n-            const user = await prisma.user.findUnique({\r\n-                where: {\r\n-                    email: email,\r\n-                },\r\n-            });\r\n-            if (user) {\r\n-                return res.status(409).json({\r\n-                    status: false,\r\n-                    message: \"User already exists\",\r\n-                });\r\n-            }\r\n-            const hashedPassword = await bcrypt.hash(password, 10);\r\n-            const newUser = await prisma.user.create({\r\n-                data: {\r\n-                    email: email,\r\n-                    password: hashedPassword,\r\n-                },\r\n-            });\r\n-            const accessToken = await jwt.signAccessToken({\r\n-                email: newUser.email,\r\n-            });\r\n-            const refreshToken = await jwt.signRefreshToken({\r\n-                email: newUser.email,\r\n-            });\r\n-            res.status(201).json({\r\n-                status: true,\r\n-                message: \"User created successfully\",\r\n-                data: {\r\n-                    accessToken,\r\n-                    refreshToken,\r\n-                },\r\n-            });\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-        }\r\n-    }\r\n-}\r\n-\r\n+import {\n+    PrismaClient\n+} from \"@prisma/client\";\n+\n+const prisma = new PrismaClient();\n+\n+require(\"dotenv\").config();\n+\n+// const bcrypt = require(\"bcrypt\");\n+// const jwt = require(\"../utils/webtokens\");\n+\n+import bcrypt from \"bcrypt\";\n+import jwt from \"../utils/webtokens\";\n+\n+class AuthService {\n+\n+}\n+\n module.exports = AuthService;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1669328150370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,24 @@\n const prisma = new PrismaClient();\n \n require(\"dotenv\").config();\n \n-// const bcrypt = require(\"bcrypt\");\n-// const jwt = require(\"../utils/webtokens\");\n \n import bcrypt from \"bcrypt\";\n import jwt from \"../utils/webtokens\";\n \n class AuthService {\n+    static async register(data) {\n+        const {\n+            email\n+        } = data;\n+        data.password = bcrypt.hashSync(data.password, 8);\n+        let user = prisma.user.create({\n+            data\n+        })\n+        data.accessToken = await jwt.signAccessToken(user);\n \n+        return data;\n+    }\n }\n \n module.exports = AuthService;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1677364279064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,52 @@\n-import {\n-    PrismaClient\n-} from \"@prisma/client\";\n-\n+const { PrismaClient } = require(\"@prisma/client\");\n const prisma = new PrismaClient();\n \n require(\"dotenv\").config();\n+const bcrypt = require(\"bcryptjs\");\n+const jwt = require(\"../utils/jwt\");\n \n+class authService {\n+    static async register(data) {\n+        const { email } = data;\n \n-import bcrypt from \"bcrypt\";\n-import jwt from \"../utils/webtokens\";\n+        data.password = bcrypt.hashSync(data.password, 8);\n+        let user = prisma.users.create({\n+            data,\n+        });\n \n-class AuthService {\n-    static async register(data) {\n-        const {\n-            email\n-        } = data;\n-        data.password = bcrypt.hashSync(data.password, 8);\n\\ No newline at end of file\n-        let user = prisma.user.create({\n-            data\n-        })\n         data.accessToken = await jwt.signAccessToken(user);\n \n         return data;\n     }\n+\n+    static async login(data) {\n+        const { email, password } = data;\n+        const user = await prisma.users.findUnique({\n+            where: {\n+                email,\n+            },\n+        });\n+\n+        if (!user) {\n+            throw createError.NotFound(\"User not registered\");\n+        }\n+\n+        const checkPassword = bcrypt.compareSync(password, user.password);\n+        if (!checkPassword)\n+            throw createError.Unauthorized(\"Email address or password not valid\");\n+\n+        delete user.password;\n+\n+        const accessToken = await jwt.signAccessToken(user);\n+\n+        return {...user, accessToken };\n+    }\n+\n+    static async all() {\n+        const allUsers = await prisma.users.findMany();\n+\n+        return allUsers;\n+    }\n }\n \n-module.exports = AuthService;\n+module.exports = authService;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1669143640226,
            "name": "Commit-0",
            "content": "import {\r\n    PrismaClient\r\n} from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"../utils/webtokens\");"
        }
    ]
}